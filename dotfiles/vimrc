call plug#begin('~/.vim-plugs')
Plug 'KabbAmine/vCoolor.vim', { 'for':['css','scss','sass'] }
Plug 'scrooloose/syntastic'
" Plug 'editorconfig/editorconfig-vim' " throws some error when the core isnt installed every time i open vim, so fuck it
Plug 'pbrisbin/vim-mkdir'
Plug 'ctrlpvim/ctrlp.vim'

Plug 'MarcWeber/vim-addon-mw-utils' "snipmate dep
Plug 'tomtom/tlib_vim' "snipmate dep
Plug 'garbas/vim-snipmate'
Plug 'ervandew/supertab'

"Plug 'nathanaelkane/vim-indent-guides'
Plug 'mileszs/ack.vim'

Plug 'tpope/vim-eunuch' " Vim sugar for the UNIX shell commands that need it the most. Features include:
":Remove: Delete a buffer and the file on disk simultaneously.
":Unlink: Like :Remove, but keeps the now empty buffer.
":Move: Rename a buffer and the file on disk simultaneously.
":Rename: Like :Move, but relative to the current file's containing directory.
":Chmod: Change the permissions of the current file.
":Mkdir: Create a directory, defaulting to the parent of the current file.
":Find: Run find and load the results into the quickfix list.
":Locate: Run locate and load the results into the quickfix list.
":Wall: Write every open window. Handy for kicking off tools like guard.
":SudoWrite: Write a privileged file with sudo.
":SudoEdit: Edit a privileged file with sudo.

Plug 'scrooloose/nerdtree' " I need my nerdtree!

Plug 'mhinz/vim-signify'

Plug 'tpope/vim-markdown', { 'for': 'markdown' }
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }

" vim-javascript is a dependency of vim-jsx, so load first
Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'mxw/vim-jsx', { 'for': 'javascript.jsx' }
Plug 'heavenshell/vim-jsdoc', { 'for': ['javascript', 'javascript.jsx'] }
"Plug 'maksimr/vim-jsbeautify'
Plug 'leafgarland/typescript-vim', { 'for': ['typescript', 'typescript.tsx'] }
Plug 'Quramy/tsuquyomi', { 'for': ['typescript', 'typescript.tsx'] }
Plug 'ianks/vim-tsx', { 'for': ['typescript.tsx'] }

Plug 'elixir-lang/vim-elixir', { 'for': ['elixir', 'eelixir'] }

Plug 'briancollins/vim-jst', { 'for': 'jst' }
Plug 'tomlion/vim-solidity', { 'for': 'solidity' }

Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'cespare/vim-toml', { 'for': 'toml' }
Plug 'markcornick/vim-bats', { 'for': 'bats' }
Plug 'andreshazard/vim-freemarker', { 'for': 'freemarker' }
Plug 'Glench/Vim-Jinja2-Syntax', { 'for': 'jinja2' }

"""
" COLOR SCHEMES
" nice place to look for color schemes
" http://vimcolors.com/?utf8=%E2%9C%93&bg=dark&colors=term&order=newest
Plug 'davb5/wombat256dave'
Plug 'NLKNguyen/papercolor-theme'



call plug#end()

" Disable swap files, they suck
set nobackup      
set nowritebackup 
set noswapfile   

set grepprg=ack

""Nerdtree stuff
" Fix weird arrows in some terminals
let g:NERDTreeDirArrows=0
nmap <C-D> :NERDTreeToggle<CR>

" Resize vim splits with alt keys
" map <silent> <A-h> <C-w>< 
" map <silent> <A-j> <C-W>- 
" map <silent> <A-k> <C-W>+ 
" map <silent> <A-l> <C-w>> 

" Fast window resizing with +/- keys (horizontal); / and * keys (vertical)
" if bufwinnr(1)
"   map <kPlus> <C-W>+
"   map <kMinus> <C-W>-
"   map <kDivide> <c-w><
"   map <kMultiply> <c-w>>
" endif

" Enable golang support
au BufRead,BufNewFile *.go set filetype=go 

" fugitive shortcuts
nmap <leader>g :Gcommit %<cr>   
nmap <leader>gs :Gstatus<cr>    
nmap <leader>gp :Git push origin HEAD<cr>

function! InlineCommand()
    let l:cmd = 'uuid'
    let l:output = system(l:cmd)
    let l:output = substitute(l:output, '[\r\n]*$', '', '')
    execute 'normal i' . l:output
endfunction

nmap <leader>i :call InlineCommand()<cr>

"""
" Copy Paste Powers
"
" Add ability to yank/paste across vim sessions
" 
" Leader-key (Backslash) y while in visual mode (SHIFT-V or CTRL-V)
vmap <leader>y y:new<CR>:call setline(1,getregtype())<CR>o<Esc>P:wq! ~/vim-clipboard.txt<CR>
" Leader-key (Backslash) p in normal mode (ESC to get out of visual mode)
map <leader>p :sview ~/vim-clipboard.txt<CR>"zdddG:q!<CR>:call setreg('"', @", @z)<CR>p

" Detect platform and provide os-level copy paste too ;)
if has("unix")
  let s:uname = substitute(system("uname -s"), '\n', '', '')
  if s:uname == "Darwin"
    " Mac Native Copy Paste
    vmap <leader>c :w !pbcopy<cr><cr>
    nmap <leader>v :read !pbpaste<cr><cr>
  elseif s:uname == "Linux"
    " Linux Native Copy Paste
    " Requires xclip ... sudo apt-get install xclip
    " If trying to use it on a headless box, you will need to achieve X11 forwarding
    " In such cases it is probably appropriate to just use the vim-only solution above
    " If using ssh, you need to ssh -X (enable X11 forwarding)
    vmap <leader>c :w !DISPLAY=:0 xclip -selection clipboard<cr><cr>
    nmap <leader>v :read !DISPLAY=:0 xclip -selection clipboard -o<cr><cr>
  endif
endif
"""

" Play nice in tmux
if &term =~ '^screen'
    " tmux will send xterm-style keys when xterm-keys is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif


" Navigate window splits easily
nnoremap <silent> <C-Right> <c-w>l
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>j

" Change dir to file dir on each file loaded
" autocmd BufEnter * silent! lcd %:p:h

" Set default tab style
set tabstop=2
set shiftwidth=2
set expandtab

set number
set cursorline

syntax enable

set backspace=indent,eol,start " enable backspace
set hlsearch " highlight searches

" double-tab leader to clear search highlight
nmap <Leader>\ :nohlsearch<CR>

" tabs
nmap <C-T> :tabe<CR>

" edit my tmux config
"nmap <Leader>t :e ~/.tmux.conf<CR>
nmap <Leader>t :TsuquyomiReloadProject<CR>

" find in project
nmap <Leader>f :vimgrep /

" find next in project
nmap <Leader>n :cnext<CR>

" source $MYVIMRC reloads the saved $MYVIMRC
nmap <Leader>s :source $MYVIMRC<CR>

" opens $MYVIMRC for editing, or use :tabedit $MYVIMRC
nmap <Leader>e :e $MYVIMRC<CR>

set t_Co=256 " Make sure your terminal is 256 colors too!

map <C-U> :CtrlPClearAllCaches<cr>

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

"" For all methods, see :help fold-methods
" zi - toggle folding feature
" zM - close all folds
" zv - expand folds to reveal cursor
""

"" HJKL Training Wheels
" inoremap  <Up>     <NOP>
" inoremap  <Down>   <NOP>
" inoremap  <Left>   <NOP>
" inoremap  <Right>  <NOP>
" noremap   <Up>     <NOP>
" noremap   <Down>   <NOP>
" noremap   <Left>   <NOP>
" noremap   <Right>  <NOP>

"" Disable bell
autocmd GUIEnter * set vb t_vb= " in the Gui
autocmd VimEnter * set vb t_vb=

"" Leave Ex mode for good
nnoremap Q <nop>

"" Enable per-project vimrc
set exrc
set secure

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" ignore files in .gitignore
let g:ctrlp_user_command = ['.git', "cd %s && git ls-files . -co --exclude-standard | awk '!/^node_modules/'", 'find %s -type f']

" Quick quit
nmap <Leader>q :q<CR>

" Enable ReactJS/JSX in .js files
let g:jsx_ext_required = 0

" JSHint
let g:syntastic_javascript_checkers = ['eslint', 'jshint']

let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi']

" map color
imap รง <M-c>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

nmap <leader>[ :set paste<CR>
nmap <leader>] :set nopaste<CR>

set background=light
colorscheme PaperColor
"set background=dark
"colorscheme wombat256dave

""" Typescript
" double-leader to get completion menu
inoremap <leader>\ <C-x><C-o>
let g:tsuquyomi_completion_detail = 1
autocmd FileType typescript setlocal completeopt+=menu,preview
" merge javascript snippets
autocmd FileType typescript SnipMateLoadScope javascript

set wrap
