#!/bin/bash
set -euo pipefail

REPO_SSH=git@github.com:kfatehi/dotconf.git
REPO_HTTP=https://github.com/kfatehi/dotconf

DOTCONF=~/.kfc

BootstrapPlatform() {
  pushd $DOTCONF > /dev/null
  git remote set-url origin $REPO_SSH
  popd > /dev/null
  MY_DOTFILES=$DOTCONF/dotfiles
  MY_BINS=$DOTCONF/bin
  source $DOTCONF/platform/$1/bootstrap.sh
}

DeterminePlatform() {
  PLATFORM="unknown"
  case `uname` in
    Linux)
      if [ -f /etc/arch-release ] ; then
        PLATFORM="archlinux"
      elif [ -f /etc/fedora-release ]; then
        PLATFORM="fedora"
      elif [ -f /etc/lsb-release ]; then
        if grep "Microsoft" /proc/sys/kernel/osrelease; then
          PLATFORM="wsl"
        else
          PLATFORM="ubuntu"
        fi
      elif grep "Raspbian" /etc/issue; then
        PLATFORM="raspbian"
      fi
      ;;
    Darwin)
      if [[ -d /System/Library/CoreServices/SpringBoard.app ]]; then
        PLATFORM="iphone"
      else
        PLATFORM="darwin"
      fi
      ;;
    MINGW*)
      PLATFORM="win"
      ;;
    CYGWIN*)
      PLATFORM="win"
      ;;
  esac
  if [ "$PLATFORM" = "unknown" ]; then
    echo "Unknown platform!"
    return -1
  else
    echo "Platform: $PLATFORM"
  fi
}

UpdatePackageManagers() {
  case $PLATFORM in 
    archlinux)
      echo "Invoking pacman to synchronize package list"
      sudo pacman -Sy
      return $?
      ;;
    ubuntu|wsl|raspbian)
      echo "Updating apt packages ..."
      AptUpdatedToday || UpdateAptRepositories
      return $?
      ;;
    fedora)
      sudo dnf update --refresh
      return $?
      ;;
    darwin)
      if hash brew > /dev/null 2>&1; then
        echo "Updating brew packages ..."
        brew update
      else
	      # we could be on iOS...

        echo "Installing brew"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi
      return $?
      ;;
  esac
}

RequirePackage() {
  hash $1 >/dev/null 2>&1 || {
    case $PLATFORM in 
      archlinux)
        sudo pacman -S $1
        return $?
        ;;
      iphone|ubuntu|raspbian)
        DEBIAN_FRONTEND=noninteractive sudo apt-get install -y $1
        return $?
        ;;
      fedora)
        sudo dnf install -y $1
        return $?
        ;;
      darwin)
        brew install -y $1
        return $?
        ;;
    esac
  }
}

GetRequirements() {
  RequirePackage "git" && test -d $DOTCONF || git clone $REPO_HTTP $DOTCONF
}

AptUpdatedToday() {
  local stampFile=/var/cache/apt/pkgcache.bin
  if [[ -f $stampFile ]]; then
    local stampstring=$(stat -c %y $stampFile)
    local stamp=$(date --date="$stampstring" +"%s")
    local now=$(date --date="$(date)" +"%s")
    local diff=$(echo "$now - $stamp" | bc)
    local aday=86400
    test $diff -lt $aday
  else
    return 1
  fi
}

UpdateAptRepositories() {
  echo "Updating apt repositories ... "
  DEBIAN_FRONTEND=noninteractive sudo apt-get update -qq
}

DeterminePlatform && UpdatePackageManagers && GetRequirements && case $PLATFORM in
  archlinux)
    BootstrapPlatform "archlinux"
    ;;
  ubuntu|raspbian)
    BootstrapPlatform "deb"
    ;;
  fedora)
    BootstrapPlatform "fedora"
    ;;
  iphone)
    BootstrapPlatform "iphone"
    ;;
  darwin)
    BootstrapPlatform "osx"
    ;;
  win)
    BootstrapPlatform "win"
    ;;
  wsl)
    BootstrapPlatform "deb"
    ;;
  *)
    echo "Unsupported platform!"
    ;;
esac
